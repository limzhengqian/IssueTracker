package BugsLife;

import java.awt.Color;
import java.awt.Image;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class IssuePage extends javax.swing.JFrame {

    private IssuesDAO issueDAO;
    private Issue issue;
    private int projectIndex;
    private int issueId;
    private int userIndex;
    private ArrayList<Issue> issueArrList;
    private UsersDAO usersDAO;
    private ArrayList<User> usersArrList;

    /**
     * Creates new form IssuePage
     */
    public IssuePage(int projectIndex, int issueId) throws SQLException {
        this.projectIndex = projectIndex;
        this.issueId = issueId;
        this.issueDAO = new IssuesDAO();
        this.issue = issueDAO.getIssue(issueId);
        this.issueArrList = issueDAO.getAllIssue(this.projectIndex + 1);
        try {
            usersDAO = new UsersDAO();
            usersArrList = usersDAO.getAllUsers();
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        this.setLayout(new java.awt.BorderLayout());
        this.add(jPanel1, java.awt.BorderLayout.NORTH);
        this.add(jPanel2, java.awt.BorderLayout.CENTER);
        scaleImage();
        //scale image for logo
        scaleImageLogo();
        this.setVisible(true);
        this.setResizable(false);
        this.setExtendedState(this.getExtendedState() | javax.swing.JFrame.MAXIMIZED_BOTH);
    }

    //scales the image of the comment icon
    private void scaleImage() {
        ImageIcon icon = new ImageIcon("C:\\Users\\user\\Documents\\Data Structure (Year 1 Sem 2)\\Project\\Comment.png");
        Image img = icon.getImage();
        Image newimg = img.getScaledInstance(Comments.getWidth() / 4, Comments.getHeight() - 7, Image.SCALE_SMOOTH);
        icon = new ImageIcon(newimg);
        Comments.setIcon(icon);
    }
    
    //Scales the image of the logo
    private void scaleImageLogo() {
        ImageIcon imageIcon = new ImageIcon("virus.png");
        Image img = imageIcon.getImage();
        Image newImg = img.getScaledInstance(jLabel1.getWidth() - 5, jLabel1.getHeight(), Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newImg);
        jLabel1.setIcon(imageIcon);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Comments = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        acceptIssue = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        issueID = new javax.swing.JLabel();
        Title = new javax.swing.JLabel();
        tag = new javax.swing.JLabel();
        timestamp = new javax.swing.JLabel();
        priority = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        status = new javax.swing.JTextField();
        setStatus = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        Edit = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        creator = new javax.swing.JLabel();
        assignee = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 252, 252));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane2.setToolTipText("");
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText(issue.getDescriptionText());
        jTextArea1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextArea1.setEditable(false);
        jScrollPane2.setViewportView(jTextArea1);

        Comments.setBackground(new java.awt.Color(0, 153, 204));
        Comments.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 15)); // NOI18N
        Comments.setForeground(new java.awt.Color(255, 255, 255));
        Comments.setText("Comments");
        Comments.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Comments.setFocusable(false);
        Comments.setIconTextGap(4);
        Comments.setMargin(new java.awt.Insets(2, 7, 2, 7));
        Comments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CommentsMouseClicked(evt);
            }
        });
        Comments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CommentsActionPerformed(evt);
            }
        });

        Back.setBackground(new java.awt.Color(0, 153, 204));
        Back.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 15)); // NOI18N
        Back.setForeground(new java.awt.Color(255, 255, 255));
        Back.setText("Back");
        Back.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Back.setFocusable(false);
        Back.setMaximumSize(new java.awt.Dimension(59, 32));
        Back.setMinimumSize(new java.awt.Dimension(59, 32));
        Back.setPreferredSize(new java.awt.Dimension(59, 32));
        Back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackMouseClicked(evt);
            }
        });
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        acceptIssue.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        acceptIssue.setText("Accept Issue");
        acceptIssue.setFocusable(false);
        acceptIssue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptIssueActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        issueID.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 22)); // NOI18N
        issueID.setText("Issue ID: " + issue.getId());

        Title.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        Title.setText("Title: "+ issue.getTitle());

        tag.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 22)); // NOI18N
        tag.setText("Tag: " + issue.getTag().toString().substring(1, issue.getTag().toString().length() - 1));

        timestamp.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 22)); // NOI18N
        timestamp.setText("Created on: " + issue.getDate());

        priority.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 22)); // NOI18N
        priority.setText("Priority: " + issue.getPriority());

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 22)); // NOI18N
        jLabel2.setText("Status: ");

        status.setEditable(false);
        status.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        status.setToolTipText("");
        status.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        status.setFocusable(false);
        status.setText(issue.getStatus());
        if(status.getText().equals("Closed")){
            status.setBackground(Color.RED);
        } else if(status.getText().equals("Open")){
            status.setBackground(Color.GREEN);
        } else if(status.getText().equals("In Progress")){
            status.setBackground(Color.ORANGE);
        } else if(status.getText().equals("Resolved")){
            status.setBackground(Color.YELLOW);
        } else {
            status.setBackground(Color.WHITE);
        }
        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });

        setStatus.setFont(new java.awt.Font("Yu Gothic UI", 1, 14)); // NOI18N
        setStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Change status", "Open", "In Progress", "Resolved", "Closed", "Reopen" }));
        setStatus.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setStatus.setFocusable(false);
        setStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                setStatusItemStateChanged(evt);
            }
        });
        setStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setStatusActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(0, 153, 255));
        jTextField1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 20)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setText("Details");
        jTextField1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextField1.setFocusable(false);

        Edit.setBackground(new java.awt.Color(0, 153, 204));
        Edit.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 15)); // NOI18N
        Edit.setForeground(new java.awt.Color(255, 255, 255));
        Edit.setText("Edit");
        Edit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Edit.setFocusable(false);
        Edit.setMaximumSize(new java.awt.Dimension(59, 32));
        Edit.setMinimumSize(new java.awt.Dimension(59, 32));
        Edit.setPreferredSize(new java.awt.Dimension(59, 32));
        Edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditMouseClicked(evt);
            }
        });
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel4.setText("Edit issue");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTextField1)
            .add(jPanel1Layout.createSequentialGroup()
                .add(27, 27, 27)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tag)
                    .add(issueID)
                    .add(priority))
                .add(436, 436, 436)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(setStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(timestamp))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Title, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Edit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(Title, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                        .add(Edit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel4)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(timestamp)
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, setStatus, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, status, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(issueID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tag)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(priority)
                        .add(0, 11, Short.MAX_VALUE))))
        );

        jTextField2.setEditable(false);
        jTextField2.setBackground(new java.awt.Color(0, 153, 255));
        jTextField2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 20)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(255, 255, 255));
        jTextField2.setText("People");
        jTextField2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextField2.setFocusable(false);

        creator.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 22)); // NOI18N
        creator.setText("Creator: " + issue.getCreatedBy());

        assignee.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 22)); // NOI18N
        assignee.setText("Assigned to: " + issue.getAssignee());

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(0, 153, 255));
        jTextField3.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 20)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(255, 255, 255));
        jTextField3.setText("Discussions");
        jTextField3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextField3.setFocusable(false);

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(0, 153, 255));
        jTextField4.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 20)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(255, 255, 255));
        jTextField4.setText("Issue Description");
        jTextField4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextField4.setFocusable(false);

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel3.setText("Do you want to discuss the issue?");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jTextField2)
            .add(jTextField4)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextField3)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(25, 25, 25)
                                .add(creator)
                                .add(438, 438, 438)
                                .add(assignee)
                                .add(18, 18, 18)
                                .add(acceptIssue))
                            .add(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel3)
                                    .add(Comments, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 139, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane2)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(0, 0, Short.MAX_VALUE)
                                .add(Back, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(creator)
                        .add(assignee))
                    .add(acceptIssue))
                .add(18, 18, 18)
                .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(8, 8, 8)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Comments, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Back, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(28, 28, 28))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CommentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CommentsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CommentsActionPerformed

    //what happens when mouse is clicked
    private void CommentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CommentsMouseClicked
        dispose(); //closes issuepage after opening comment section
        try {
            //creates new instance of commentSection
            CommentSection commentSec = new CommentSection(projectIndex, issueId);
        } catch (SQLException ex) {
            Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CommentsMouseClicked

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BackActionPerformed

    private void BackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackMouseClicked
        dispose();
        try {
            new IssueDashboard(projectIndex);
        } catch (SQLException ex) {
            Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BackMouseClicked

    private void EditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_EditMouseClicked

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        if (!issue.getCreatedBy().equals(Login.userName)) {
            //Shows error message if user tries to edit issue which was not created by him/her
            JOptionPane.showMessageDialog(null, "Warning! You do not have access to edit other people's issues", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                new EditIssue(projectIndex, issue);
            } catch (SQLException ex) {
                Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_EditActionPerformed

    private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusActionPerformed

    private void setStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_setStatusItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_setStatusItemStateChanged

    private void setStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setStatusActionPerformed
        // TODO add your handling code here:
        //get the selected status 
        String selectedStatus = setStatus.getSelectedItem().toString();
        boolean changeStatus = false;
        Date date = new Date();
        long currentTimeStamp = date.getTime() / 1000L;
        
        /* determine if user is allowed to change to the selected status
           if the action does not meet the requirements, display error message
        */
        // if choose In Progress
        // only Open can change to In Progress
        if (selectedStatus.equals("In Progress") && status.getText().equals("Open")) {
            issue.setStatus("In Progress");
            status.setText("In Progress");
            status.setBackground(Color.ORANGE);
            JOptionPane.showMessageDialog(this, "The status has been updated!");
            changeStatus = true;
            try {
                issueDAO.addIssueLog(projectIndex + 1, issueId, Login.getUsername() 
                + " changed the status of issue to 'In Progress'.", (int) currentTimeStamp);
            } catch (SQLException ex) {
                Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
            } 
        } 
        // if choose Resolved
        // Only Closed cannot change to Resolved
        else if (selectedStatus.equals("Resolved") && !status.getText().equals("Closed")) {
            issue.setStatus("Resolved");
            status.setText("Resolved");
            status.setBackground(Color.YELLOW);
            JOptionPane.showMessageDialog(this, "The status has been updated!");
            changeStatus = true;
            try {
                issueDAO.addIssueLog(projectIndex + 1, issueId, Login.getUsername() 
                + " resolved the issue.", (int) currentTimeStamp);
                //add 3 points when user resolved the issue
                UsersDAO dao = new UsersDAO();
                dao.updatePoints(3, Login.userID);
            } catch (SQLException ex) {
                Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        // if choose Closed
        // verify if it's creator or assignee before closing issue
        else if (selectedStatus.equals("Closed") && (Login.getUsername().equals(issue.getCreatedBy())
                || Login.getUsername().equals(issue.getAssignee()))) {
            issue.setStatus("Closed");
            status.setText("Closed");
            status.setBackground(Color.RED);
            JOptionPane.showMessageDialog(this, "The status has been updated!");
            changeStatus = true;
            try {
                issueDAO.addIssueLog(projectIndex + 1, issueId, Login.getUsername() 
                + " closed the issue.", (int) currentTimeStamp);
            } catch (SQLException ex) {
                Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        // if choose Reopen
        // Only In Progress and Open cannot change to Reopen
        // verify if it is creator before reopening issue
        else if (selectedStatus.equals("Reopen") && !status.getText().equals("In Progress") && !status.getText().equals("Open")
                && Login.getUsername().equals(issue.getCreatedBy())) {
            issue.setStatus("Open");
            status.setText("Open");
            status.setBackground(Color.GREEN);
            JOptionPane.showMessageDialog(this, "The status has been updated!");
            changeStatus = true;
            try {
                issueDAO.addIssueLog(projectIndex + 1, issueId, Login.getUsername() 
                + " reopened the issue.", (int) currentTimeStamp);
            } catch (SQLException ex) {
                Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        // if choose Open
        // Only In Progress can change to Open
        else if (selectedStatus.equals("Open") && status.getText().equals("In Progress")) {
            issue.setStatus("Open");
            status.setText("Open");
            status.setBackground(Color.GREEN);
            JOptionPane.showMessageDialog(this, "The status has been updated!");
            changeStatus = true;
            try {
                issueDAO.addIssueLog(projectIndex + 1, issueId, Login.getUsername() 
                + " changed the status of issue to 'Open'.", (int) currentTimeStamp);
            } catch (SQLException ex) {
                Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
        // if choose 'change status'
        else if (selectedStatus.equals("Change status")) {
            //nothing happen
        } else {
            JOptionPane.showMessageDialog(null, "You are not allowed to perform this action.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // overwrite the data to update issue status if there is change of status
        if (changeStatus) {
            try {
                issueDAO.editIssueStatus(issue.getId(), issue.getStatus());
            } catch (SQLException ex) {
                Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_setStatusActionPerformed

    private void acceptIssueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptIssueActionPerformed
        // TODO add your handling code here:
        // user can accept the issue only if assignee is blank
        if (issue.getAssignee().equals("")) {
            issue.setAssignee(Login.getUsername());
            assignee.setText("Assigned to: " + Login.getUsername());
            
            // change issue status from 'Open' to 'In Progress'
            issue.setStatus("In Progress");
            status.setText("In Progress");
            status.setBackground(Color.ORANGE);
            JOptionPane.showMessageDialog(null, "Issue accepted!");
            
            // overwrite data since status and assignee are changed
            try {
                issueDAO.editIssueStatus(issue.getId(), issue.getStatus());
                issueDAO.editIssueAssignee(issue.getId(), issue.getAssignee());
                Date date = new Date();
                long currentTimeStamp = date.getTime() / 1000L;
                
                // update issue log
                issueDAO.addIssueLog(projectIndex + 1, issueId, Login.getUsername() + " accepted the issue.", (int) currentTimeStamp);
            } catch (SQLException ex) {
                Logger.getLogger(IssuePage.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Issue is already assigned.");
        }
    }//GEN-LAST:event_acceptIssueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IssuePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IssuePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IssuePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IssuePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new IssuePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Comments;
    private javax.swing.JButton Edit;
    private javax.swing.JLabel Title;
    private javax.swing.JButton acceptIssue;
    private javax.swing.JLabel assignee;
    private javax.swing.JLabel creator;
    private javax.swing.JLabel issueID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel priority;
    private javax.swing.JComboBox<String> setStatus;
    private javax.swing.JTextField status;
    private javax.swing.JLabel tag;
    private javax.swing.JLabel timestamp;
    // End of variables declaration//GEN-END:variables

}
